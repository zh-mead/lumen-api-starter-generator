<?php

namespace DummyNamespace;

use App\Contracts\Repositories\DummyClassRepository;
use App\Repositories\Criteria\DummyClassCriteria;
use App\Repositories\Eloquent\DummyClassRepositoryEloquent;
use App\Repositories\Presenters\DummyClassPresenter;
use Illuminate\Http\Request;

class DummyClassService
{
    /**
     * @var DummyClassRepositoryEloquent
     */
    private $repository;

    /**
     * DummyClassService constructor.
     *
     * @param DummyClassRepositoryEloquent $DummyLowercaseClassRepositoryEloquent
     */
    public function __construct(DummyClassRepositoryEloquent $repository)
    {
        $this->repository = $repository;
    }

    /**
     * @param Request $request
     *
     * @return mixed
     * @throws \Prettus\Repository\Exceptions\RepositoryException
     */
    public function handleList(Request $request)
    {
        $this->repository->pushCriteria(new DummyClassCriteria($request));
        $this->repository->setPresenter(DummyClassPresenter::class);

        return $this->repository->searchListsPage();
    }

    /**
     * @param $id
     *
     * @return \Illuminate\Database\Eloquent\Model
     */
    public function handleProfile($id)
    {
        $this->repository->setPresenter(DummyClassPresenter::class);
        return $this->repository->searchBy($id);
    }

    /**
     * @param array $data
     *
     * @return mixed
     * @throws \Prettus\Validator\Exceptions\ValidatorException
     */
    public function handleStore($data)
    {
        $DummyLowercaseClass = $this->repository->create($data);
        return $DummyLowercaseClass;
    }

    /**
     * @param array $data
     *
     * @return mixed
     * @throws \Prettus\Validator\Exceptions\ValidatorException
     */
    public function handleUpdate($data)
    {
        $DummyLowercaseClass = $this->repository->update($data,$data['id']);
        return $DummyLowercaseClass;
    }

    /**
    * @param Request $request
    *
    * @return mixed
    * @throws \Prettus\Validator\Exceptions\ValidatorException
    */
    public function handleDelete($id)
    {
        return $this->repository->delete($id);
    }

    /**
     * 选项
     * @param Request $request
     * @return \Illuminate\Contracts\Pagination\LengthAwarePaginator|\Illuminate\Support\Collection|mixed
     * @throws \Prettus\Repository\Exceptions\RepositoryException
     */
    public function handleSelectOptions(Request $request)
    {
        $this->repository->pushCriteria(new DummyClassCriteria($request));
        return $this->repository->all(['id', 'name']);
    }

    /**
     * 批量删除
     * @param $ids
     * @return mixed
     */
    public function handleBatchDelete($ids)
    {
        return $this->repository->whereIn('id', $ids)->delete();
    }

     /**
     * @param Request $request
     *
     * @return mixed
     * @throws \Prettus\Repository\Exceptions\RepositoryException
     */
    public function handleAll(Request $request)
    {
        $this->repository->pushCriteria(new DummyClassCriteria($request));
        $this->repository->setPresenter(DummyClassPresenter::class);

        return $this->repository->get();
    }

     /**
     * @param Request $request
     *
     * @return mixed
     * @throws \Prettus\Repository\Exceptions\RepositoryException
     */
    public function handleIds(Request $request)
    {
        $this->repository->pushCriteria(new DummyClassCriteria($request));
        return $this->repository->pluck('id');
    }
}
